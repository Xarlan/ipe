import flask
from src.db.entities import db, Vulnerability

"""
OBJECT_TYPES = {
    0: "web", 
    1: "mobile", 
    2: "library", 
    3: "other"
}
"""


def create_vulnerability(req):
    try:
        req_body = req.get_json()

        project_id = int(req_body['project_id'])
        name = req_body['name']
        object = int(req_body['object'])
        full_path = req_body['full_path']
        criticality = int(req_body['criticality'])
        probability = int(req_body['probability'])
        final_criticality = int(req_body['final_criticality'])
        description = req_body['description']
        risk = req_body['risk']
        details = req_body['details']
        recommendation = req_body['recommendation']

        vulnerability = Vulnerability(project_id=project_id, name=name, object=object, full_path=full_path,
                                      criticality=criticality, probability=probability, final_criticality=final_criticality,
                                      description=description, risk=risk, details=details, recommendation=recommendation)

        try:
            db.session.add(vulnerability)
            db.session.commit()
            return flask.make_response(flask.jsonify({"status": 1, "data": "Vulnerability added"}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during creating vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Incorrect input data"}), 500)


def delete_vulnerability(req):
    try:
        req_body = req.get_json()
        vuln_id = int(req_body['vuln_id'])
        vulnerability = Vulnerability.query.get_or_404(vuln_id)
        try:
            db.session.delete(vulnerability)
            db.session.commit()
            return flask.make_response(flask.jsonify({"status": 1}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during deleting vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Error occured during processing input data."}),
                                   500)


def edit_vulnerability(req):
    try:
        req_body = req.get_json()
        vuln = Vulnerability.query.get(int(req_body['vuln_id']))

        vuln.name = req_body['name']
        vuln.object = int(req_body['object'])
        vuln.full_path = req_body['full_path']
        vuln.criticality = int(req_body['criticality'])
        vuln.probability = int(req_body['probability'])
        vuln.final_criticality = int(req_body['final_criticality'])
        vuln.description = req_body['description']
        vuln.risk = req_body['risk']
        vuln.details = req_body['details']
        vuln.recommendation = req_body['recommendation']

        try:
            db.session.commit()
            return flask.make_response(flask.jsonify({"status": 1}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during editing vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Error occured during processing input data."}),
                                   500)
