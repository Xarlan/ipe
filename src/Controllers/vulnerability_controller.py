import flask
from src.db.entities import db, Vulnerability, Host, VulnRef, Attachment
import validators
import ipaddress
from itertools import chain
from sqlalchemy import or_
from src.Controllers.attachment_controller import delete_folder
from flask_login import current_user

"""
OBJECT_TYPES = {
    0: "web", 
    1: "mobile", 
    2: "library", 
    3: "other"
}
"""


def create_vulnerability(req):
    try:
        req_body = req.get_json()

        project_id = int(req_body['project_id'])
        name = req_body['name']
        object = int(req_body['object'])
        full_path = req_body['full_path']
        criticality = int(req_body['criticality'])
        probability = int(req_body['probability'])
        final_criticality = int(req_body['final_criticality'])
        description = req_body['description']
        risk = req_body['risk']
        details = req_body['details']
        recommendation = req_body['recommendation']
        target = list(req_body['target'])
        ips_prepared = []
        domains_prepared = []
        vul_references = []

        if target:
            for host in target:
                if validators.domain(str(host).strip()):
                    domains_prepared.append((host.strip()))
                else:
                    ips_prepared.append(host.strip())

        vulnerability = Vulnerability(project_id=project_id, name=name, object=object, full_path=full_path,
                                      criticality=criticality, probability=probability, final_criticality=final_criticality,
                                      description=description, risk=risk, details=details, recommendation=recommendation,
                                      creator=current_user.id)

        try:
            db.session.add(vulnerability)
            db.session.commit()

            if target:
                search_ips = []
                search_domains = []
                if ips_prepared:
                    search_ips = Host.query.filter(Host.project_id == project_id,
                                                   Host.ip.in_(ips_prepared)).all()
                if domains_prepared:
                    search_domains = Host.query.filter(Host.project_id == project_id,
                                                       Host.domain.in_(domains_prepared)).all()

                for host in search_ips + search_domains:
                    vul_references.append(VulnRef(host_id=host.id, vuln_id=vulnerability.id))

                db.session.add_all(vul_references)
                db.session.commit()

            return flask.make_response(flask.jsonify({"status": 1, "data": "Vulnerability added"}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during creating vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Incorrect input data"}), 500)


def delete_vulnerability(req):
    try:
        req_body = req.get_json()
        vuln_id = int(req_body['vuln_id'])
        vulnerability = Vulnerability.query.get(vuln_id)
        try:
            attachments = db.session.query(Attachment).filter(Attachment.vuln_id == vuln_id).count()
            db.session.delete(vulnerability)
            db.session.commit()
            if attachments and attachments > 0:
                delete_folder(vuln_id)

            return flask.make_response(flask.jsonify({"status": 1}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during deleting vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Error occured during processing input data."}),
                                   500)


def edit_vulnerability(req):
    try:
        req_body = req.get_json()
        vuln = Vulnerability.query.get(int(req_body['vuln_id']))
        project_id = int(req_body['project_id'])

        vuln.name = req_body['name']
        vuln.object = int(req_body['object'])
        vuln.full_path = req_body['full_path']
        vuln.criticality = int(req_body['criticality'])
        vuln.probability = int(req_body['probability'])
        vuln.final_criticality = int(req_body['final_criticality'])
        vuln.description = req_body['description']
        vuln.risk = req_body['risk']
        vuln.details = req_body['details']
        vuln.recommendation = req_body['recommendation']

        target = list(req_body['target'])
        ips_prepared = []
        domains_prepared = []
        vul_references = []

        if len(target) > 0:
            for host in target:
                if validators.domain(str(host).strip()):
                    domains_prepared.append(host.strip())
                else:
                    ips_prepared.append(str(ipaddress.ip_address(host.strip())))

        try:
            db.session.commit()

            if len(target) > 0:
                current_refs = db.session.query(VulnRef.host_id).filter(VulnRef.vuln_id == int(req_body['vuln_id'])).all()

                if current_refs:
                    current_hosts = Host.query.filter(Host.project_id == project_id, Host.id.in_(list(chain.from_iterable(current_refs)))).all()
                    current_hosts_ips = []
                    current_hosts_domains = []
                    for host in current_hosts:
                        if host.domain and validators.domain(host.domain):
                            current_hosts_domains.append(host.domain)
                        else:
                            current_hosts_ips.append(host.ip)

                    new_ips = list(set(ips_prepared) - set(current_hosts_ips))
                    new_domains = list(set(domains_prepared) - set(current_hosts_domains))
                    remove_ips = list(set(current_hosts_ips) - set(ips_prepared))
                    remove_domains = list(set(current_hosts_domains) - set(domains_prepared))

                    if new_ips or new_domains:
                        new_hosts_ids = db.session.query(Host.id).filter((Host.project_id == project_id), or_( Host.ip.in_(new_ips), Host.domain.in_(new_domains))).all()
                        if new_hosts_ids:
                            refs = []
                            for id in list(chain.from_iterable(new_hosts_ids)):
                                refs.append(VulnRef(vuln_id=int(req_body['vuln_id']), host_id=id))
                            db.session.add_all(refs)
                    if remove_ips or remove_domains:
                        remove_hosts_ids = db.session.query(Host.id).filter((Host.project_id == project_id), or_( Host.ip.in_(remove_ips), Host.domain.in_(remove_domains))).all()
                        if remove_hosts_ids:
                            for id in list(chain.from_iterable(remove_hosts_ids)):
                                VulnRef.query.filter(VulnRef.host_id == id).delete()

                    db.session.commit()
                    return flask.make_response(flask.jsonify({"status": 1}), 200)
                else:
                    search_ips = []
                    search_domains = []
                    if ips_prepared:
                        search_ips = Host.query.filter(Host.project_id == project_id,
                                                       Host.ip.in_(ips_prepared)).all()
                    if domains_prepared:
                        search_domains = Host.query.filter(Host.project_id == project_id,
                                                           Host.domain.in_(domains_prepared)).all()

                    for host in search_ips + search_domains:
                        vul_references.append(VulnRef(host_id=host.id, vuln_id=int(req_body['vuln_id'])))

                    db.session.add_all(vul_references)
                    db.session.commit()
                    return flask.make_response(flask.jsonify({"status": 1}), 200)
            else:
                current_refs = db.session.query(VulnRef.id).filter(VulnRef.vuln_id == int(req_body['vuln_id'])).all()
                for ref in current_refs:
                    VulnRef.query.filter(VulnRef.id == ref).delete()
                db.session.commit()

                return flask.make_response(flask.jsonify({"status": 1}), 200)
        except:
            return flask.make_response(flask.jsonify({"status": 0, "error": "Error during editing vulnerability"}), 500)
    except:
        return flask.make_response(flask.jsonify({"status": 0, "error": "Error occured during processing input data."}),
                                   500)


def get_vulnerability(id):
    vulnerability = Vulnerability.query.get_or_404(id)
    references = VulnRef.query.filter(VulnRef.vuln_id == id).all()
    hosts = []
    for refer in references:
        hosts.append(refer.host_id)
    target = Host.query.filter(Host.project_id == vulnerability.project_id, Host.id.in_(hosts)).all()
    attachments = Attachment.query.filter(Attachment.vuln_id == id)
    return flask.render_template('vuln.html', title=vulnerability.name, page="vuln", layer=2, vuln=vulnerability,
                                 project_id=vulnerability.project_id, target=target, attachments=attachments)
